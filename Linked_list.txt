#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node *next;
}*first = NULL;

void display(struct node *p)
{
    while(p!=NULL)
    {
        p = p->next;
        printf("%d ",p->data);
    }
}

void create(int a[],int n)
{
    struct node *t,*last;
    first= (struct node *)malloc(sizeof(struct node));
    first->data = a[0];
    first->next = NULL;
    last = first;

    for(int i=0; i<n; i++)
    {
        t = (struct node *)malloc(sizeof(struct node));
        t->data = a[i];
        t->next = NULL;
        last->next = t;
        last = t;
    }
}

int count(struct node *p)
{
    int l=0;
    while(p)
    {
        l++;
        p=p->next;
    }
    return l;
}

void insert(struct node *p, int index, int x)
{
    struct node *t;
    if(index<0 || index>count(p))
    {
        return;
    }
    t = (struct node *)malloc(sizeof(struct node));
    t->data = x;

    if(index == 0)
    {
        t->next = first;
        first = t;
    }
    else
    {
        for(int i=0; i< index-1; i++)
        {
            p = p->next;
        }
        t->next = p->next;
        p->next = t;
    }
}

int Delete(struct node *p, int index)
{
    struct node *q=NULL;
    int x=-1;
    if(index<1 || index>count(p))
    {
        return -1;
    }
    if(index==1)
    {
        q=first;
        x = first->data;
        first = first->next;
        free(q);
        return x;
    }
    else
    {
        for(int i=0; i<index; i++)
        {
            q = p;
            p = p->next;
        }
        q->next = p->next;
        x = p->data;
        free(p);
        return x;
    }
}

int sum(struct node *p)
{
    int s=0;

    while(p!=NULL)
    {
        s+=p->data;
        p=p->next;
    }
    
    return s;
}

int main()
{
    int A[] = {1,2,3,4,5};
    create(A,5);

    insert(first,3,10);

    Delete(first,3);

    display(first);

    printf("%d",sum(first));

    return 0;
}
